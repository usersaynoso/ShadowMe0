-- Shadow Me Database Migration Script
-- Generated: 2025-05-07T19:46:55.445Z
-- Target: Supabase

-- This script will:
-- 1. Create all enums
-- 2. Create all tables
-- 3. Seed emotions data

BEGIN;

-- Create enums
-- Create user_type_enum enum
CREATE TYPE user_type_enum AS ENUM ('user', 'moderator', 'manager', 'admin');

-- Create friendship_status_enum enum
CREATE TYPE friendship_status_enum AS ENUM ('pending', 'accepted', 'blocked');

-- Create parent_type_enum enum
CREATE TYPE parent_type_enum AS ENUM ('friend_group', 'group', 'profile');

-- Create session_privacy_enum enum
CREATE TYPE session_privacy_enum AS ENUM ('one_to_one', 'friend_group', 'group', 'public');

-- Create post_parent_enum enum
CREATE TYPE post_parent_enum AS ENUM ('profile', 'friend_group', 'group');

-- Create audience_enum enum
CREATE TYPE audience_enum AS ENUM ('everyone', 'friends', 'just_me', 'friend_group', 'group');

-- Create message_type_enum enum
CREATE TYPE message_type_enum AS ENUM ('text', 'emoji', 'file');

-- Create reaction_type_enum enum
CREATE TYPE reaction_type_enum AS ENUM ('like', 'love', 'laugh', 'care', 'wow', 'sad', 'angry', 'emoji');

-- Create event_type_enum enum
CREATE TYPE event_type_enum AS ENUM ('friendship_accepted', 'message_sent', 'shadow_session_created', 'post_created', 'post_liked', 'post_commented');

-- Create chat_room_members table
CREATE TABLE chat_room_members (
  chat_room_id UUID NOT NULL,
  user_id UUID NOT NULL,
  mute_until TIMESTAMP WITH TIME ZONE,
  joined_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (chat_room_id, user_id),
  FOREIGN KEY (chat_room_id) REFERENCES chat_rooms(chat_room_id),
  FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- Create chat_rooms table
CREATE TABLE chat_rooms (
  chat_room_id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  parent_type parent_type_enum NOT NULL,
  parent_id UUID NOT NULL,
  title VARCHAR(80),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create emotions table
CREATE TABLE emotions (
  emotion_id SMALLINT NOT NULL PRIMARY KEY,
  emotion_name VARCHAR(30) NOT NULL,
  emotion_color VARCHAR(7) NOT NULL
);

-- Create feed_events table
CREATE TABLE feed_events (
  event_id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id_actor UUID,
  event_type event_type_enum,
  payload JSONB,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id_actor) REFERENCES users(user_id)
);

-- Create friend_group_members table
CREATE TABLE friend_group_members (
  friend_group_id UUID NOT NULL,
  user_id UUID NOT NULL,
  role VARCHAR(20) DEFAULT 'member'::character varying,
  joined_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (friend_group_id, user_id),
  FOREIGN KEY (friend_group_id) REFERENCES friend_groups(friend_group_id),
  FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- Create friend_groups table
CREATE TABLE friend_groups (
  friend_group_id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  owner_user_id UUID,
  name VARCHAR(80) NOT NULL,
  description TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (owner_user_id) REFERENCES users(user_id)
);

-- Create friends table
CREATE TABLE friends (
  user_id UUID NOT NULL,
  friend_id UUID NOT NULL,
  status friendship_status_enum DEFAULT 'pending'::friendship_status_enum,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (user_id, friend_id),
  FOREIGN KEY (user_id) REFERENCES users(user_id),
  FOREIGN KEY (friend_id) REFERENCES users(user_id)
);

-- Create group_members table
CREATE TABLE group_members (
  group_id UUID NOT NULL,
  user_id UUID NOT NULL,
  role VARCHAR(20) DEFAULT 'member'::character varying,
  joined_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (group_id, user_id),
  FOREIGN KEY (group_id) REFERENCES groups(group_id),
  FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- Create groups table
CREATE TABLE groups (
  group_id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  creator_user_id UUID,
  name VARCHAR(80) NOT NULL,
  topic_tag VARCHAR(50),
  is_public BOOLEAN DEFAULT true,
  description TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (creator_user_id) REFERENCES users(user_id)
);

-- Create messages table
CREATE TABLE messages (
  message_id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  chat_room_id UUID,
  sender_id UUID,
  recipient_id UUID,
  body TEXT,
  message_type message_type_enum DEFAULT 'text'::message_type_enum,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  edited_at TIMESTAMP WITH TIME ZONE,
  FOREIGN KEY (chat_room_id) REFERENCES chat_rooms(chat_room_id),
  FOREIGN KEY (sender_id) REFERENCES users(user_id),
  FOREIGN KEY (recipient_id) REFERENCES users(user_id)
);

-- Create post_audience table
CREATE TABLE post_audience (
  post_id UUID NOT NULL PRIMARY KEY,
  friend_group_id UUID NOT NULL PRIMARY KEY,
  FOREIGN KEY (post_id) REFERENCES posts(post_id),
  FOREIGN KEY (friend_group_id) REFERENCES friend_groups(friend_group_id)
);

-- Create post_comments table
CREATE TABLE post_comments (
  comment_id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  post_id UUID,
  author_user_id UUID,
  parent_comment_id UUID,
  body TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  edited_at TIMESTAMP WITH TIME ZONE,
  FOREIGN KEY (post_id) REFERENCES posts(post_id),
  FOREIGN KEY (author_user_id) REFERENCES users(user_id),
  FOREIGN KEY (parent_comment_id) REFERENCES post_comments(comment_id)
);

-- Create post_media table
CREATE TABLE post_media (
  media_id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  post_id UUID,
  media_url TEXT NOT NULL,
  media_type VARCHAR(20) NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (post_id) REFERENCES posts(post_id)
);

-- Create post_reactions table
CREATE TABLE post_reactions (
  reaction_id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  post_id UUID,
  user_id UUID,
  reaction_type reaction_type_enum DEFAULT 'like'::reaction_type_enum,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (post_id) REFERENCES posts(post_id),
  FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- Create posts table
CREATE TABLE posts (
  post_id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  author_user_id UUID,
  parent_type post_parent_enum NOT NULL,
  parent_id UUID NOT NULL,
  audience audience_enum NOT NULL,
  content TEXT,
  emotion_ids TEXT[] NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE,
  FOREIGN KEY (author_user_id) REFERENCES users(user_id)
);

-- Create profiles table
CREATE TABLE profiles (
  profile_id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID,
  display_name VARCHAR(60),
  bio TEXT,
  avatar_url TEXT,
  timezone TEXT DEFAULT 'UTC'::text,
  last_seen_at TIMESTAMP WITH TIME ZONE,
  FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- Create shadow_session_participants table
CREATE TABLE shadow_session_participants (
  post_id UUID NOT NULL PRIMARY KEY,
  user_id UUID NOT NULL PRIMARY KEY,
  joined_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (post_id) REFERENCES shadow_sessions(post_id),
  FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- Create shadow_sessions table
CREATE TABLE shadow_sessions (
  post_id UUID NOT NULL PRIMARY KEY,
  starts_at TIMESTAMP WITH TIME ZONE NOT NULL,
  ends_at TIMESTAMP WITH TIME ZONE NOT NULL,
  timezone TEXT NOT NULL,
  title VARCHAR(100),
  FOREIGN KEY (post_id) REFERENCES posts(post_id)
);

-- Create users table
CREATE TABLE users (
  user_id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  email TEXT NOT NULL,
  password TEXT NOT NULL,
  user_type user_type_enum DEFAULT 'user'::user_type_enum,
  user_points NUMERIC DEFAULT '0'::numeric,
  user_level SMALLINT DEFAULT 1,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Seed emotions data
INSERT INTO emotions (emotion_id, emotion_name, emotion_color) VALUES
  (1, 'Happy', '#FFC107'),
  (2, 'Calm', '#4CAF50'),
  (3, 'Sad', '#2196F3'),
  (4, 'Anxious', '#E91E63'),
  (5, 'Excited', '#FF5722'),
  (6, 'Thoughtful', '#9C27B0'),
  (7, 'Tired', '#78909C'),
  (8, 'Grateful', '#8BC34A'),
  (9, 'Frustrated', '#F44336'),
  (10, 'Hopeful', '#3F51B5'),
  (11, 'Peaceful', '#00BCD4'),
  (12, 'Confused', '#FF9800');

COMMIT;
